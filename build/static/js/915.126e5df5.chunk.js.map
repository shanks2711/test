{"version":3,"file":"static/js/915.126e5df5.chunk.js","mappings":"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","sources":["../node_modules/@web3-react/walletconnect-connector/src/index.ts"],"sourcesContent":["import WalletConnectProvider from '@walletconnect/ethereum-provider'\nimport { IWCEthRpcConnectionOptions } from '@walletconnect/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWCEthRpcConnectionOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  public walletConnectProvider?: WalletConnectProvider\n  private readonly config: WalletConnectConnectorArguments\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.connector.connected) {\n      await this.walletConnectProvider.connector.createSession(\n        this.config.chainId ? { chainId: this.config.chainId } : undefined\n      )\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.connector.uri)\n    }\n\n    let account: string\n    account = await new Promise<string>((resolve, reject) => {\n      const userReject = () => {\n        // Erase the provider manually\n        this.walletConnectProvider = undefined\n        reject(new UserRejectedRequestError())\n      }\n\n      // Workaround to bubble up the error when user reject the connection\n      this.walletConnectProvider!.connector.on('disconnect', () => {\n        // Check provider has not been enabled to prevent this event callback from being called in the future\n        if (!account) {\n          userReject()\n        }\n      })\n\n      this.walletConnectProvider!.enable()\n        .then((accounts: string[]) => resolve(accounts[0]))\n        .catch((error: Error): void => {\n          // TODO ideally this would be a better check\n          if (error.message === 'User closed modal') {\n            userReject()\n            return\n          }\n          reject(error)\n        })\n    }).catch(err => {\n      throw err\n    })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return Promise.resolve(this.walletConnectProvider!.chainId)\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return Promise.resolve(this.walletConnectProvider!.accounts).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider.disconnect()\n    }\n  }\n\n  public async close() {\n    this.emitDeactivate()\n  }\n}\n"],"names":["URI_AVAILABLE","UserRejectedRequestError","_this","name","constructor","message","_inheritsLoose","Error","getSupportedChains","supportedChainIds","rpc","Object","keys","map","k","Number","undefined","WalletConnectConnector","config","_this2","handleChainChanged","bind","handleAccountsChanged","handleDisconnect","_proto","chainId","this","emitUpdate","accounts","account","walletConnectProvider","removeListener","emitDeactivate","activate","Promise","resolve","reject","userReject","_this4","connector","on","enable","then","error","err","provider","connected","createSession","emit","uri","m","WalletConnectProvider","e","getProvider","getChainId","getAccount","deactivate","disconnect","close","AbstractConnector"],"sourceRoot":""}